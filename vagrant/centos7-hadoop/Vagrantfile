# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "kane_project/centos7x64GUIpuppet"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     vb.gui = true
     vb.name = "centos7-hadoop"
     # Customize the amount of memory on the VM:
     vb.memory = "2048"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
        sudo systemctl stop firewalld
        sudo systemctl disable firewalld
        sudo rpm -i /vagrant/provision/jdk-8u*.rpm
        #sudo puppet module install kaneproject/eclipse
        #sudo puppet module install puppet/archive
    echo "Descomprime!"
    sudo tar xvf /vagrant/provision/hadoop-2.6.*.tar.gz -C /usr/local
    sudo cp /vagrant/provision/hadoop.sh /etc/profile.d/hadoop.sh
    sudo chmod +x /etc/profile.d/hadoop.sh
    sudo cp /vagrant/provision/java.sh /etc/profile.d/java.sh
    sudo cp /vagrant/provision/core-site.xml /usr/local/hadoop-2.6.*/etc/hadoop/core-site.xml
    sudo cp /vagrant/provision/hdfs-site.xml /usr/local/hadoop-2.6.*/etc/hadoop/hdfs-site.xml
    cd /usr/local/hadoop-2.6.* && sudo mkdir -p hadoop_data/hdfs/{datanode,namenode}
    sudo sed -i "s#PATH_HADOOP#/usr/local/$(ls /usr/local | grep hadoop-)#g" /etc/profile.d/hadoop.sh
    sudo sed -i "s#HADOOP_VERSION#$(ls /usr/local | grep hadoop-)#g" /usr/local/$(ls /usr/local | grep hadoop-)/etc/hadoop/hdfs-site.xml
    sudo sed -i "s/UseDNS no//g" /etc/ssh/ssh_config
    #Arrancar servicio Hadoop con start-dfs.sh
    #Parar servicio Hadoop con stop-dfs.sh
    sudo chown -R vagrant:vagrant /usr/local/hadoop-*
    sudo chmod -R u+rwx /usr/local/hadoop-*
    export JAVA_HOME=/usr/java/jdk1.8.0_131 && /usr/local/$(ls /usr/local | grep hadoop-)/bin/hadoop namenode -format
    sudo sed -i "s/enforcing/disabled/g" /etc/selinux/config
    sudo setenforce 0
    echo 'echo "Se debe lanzar start-dfs.sh y luego start-yarn.sh"' >> /home/vagrant/.bash_profile
    echo 'echo "password de vagrant: vagrant"' >> /home/vagrant/.bash_profile
    echo 'echo " start-dfs.sh && start-yarn.sh"' >> /home/vagrant/.bash_profile
    sudo chown -R vagrant:vagrant /usr/local/hadoop-*
    sudo chmod -R u+rwx /usr/local/hadoop-*
    sudo chown -R vagrant:vagrant /home/vagrant

  SHELL
  #config.vm.provision :puppet do |puppet|
   #     puppet.manifests_path = "provision"
    #    puppet.manifest_file = "default.pp"
  #end
end
